import { useState, useEffect } from "react";
import { 
  getCampaigns, 
  getTemplates, 
  createCampaign, 
  uploadClients, 
  sendCampaign,
  deleteCampaign
} from "../../services/campaignService";

const useCampaigns = () => {
  const [campaigns, setCampaigns] = useState([]); 
  const [templates, setTemplates] = useState([]); // ðŸ”¹ Guardar templates
  const [pagination, setPagination] = useState({ page: 1, pageSize: 10, total: 0 });
  const [sortModel, setSortModel] = useState([]);
  const [openModal, setOpenModal] = useState(false);
  const [selectedCampaign, setSelectedCampaign] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ðŸ”¹ Obtener campaÃ±as al cambiar la paginaciÃ³n
  useEffect(() => {
    fetchCampaigns();
  }, [pagination.page, pagination.pageSize]);

  // ðŸ”¹ Obtener campaÃ±as
  const fetchCampaigns = async () => {
    setLoading(true);
    setError(null);
    try {
        const { campaigns, totalCount } = await getCampaigns();

        // ðŸ”¹ Asegurar que cada campaÃ±a tenga un campo `id` basado en `campanha_id`
        const formattedCampaigns = campaigns.map((campaign) => ({
            ...campaign,
            id: campaign.campanha_id, // âœ… Agregar `id` para DataGrid
            nombre: campaign.nombre_campanha, // âœ… Normalizar nombres de columnas
            estado: campaign.estado_campanha,
            fechaCreacion: campaign.fecha_creacion,
        }));

        setCampaigns(formattedCampaigns);
        setPagination((prev) => ({ ...prev, total: totalCount || 0 }));
    } catch (err) {
        setError("Error al obtener campaÃ±as");
        setCampaigns([]);
    } finally {
        setLoading(false);
    }
  };

  // ðŸ”¹ Obtener templates de Twilio
  const fetchTemplates = async () => {
    try {
      const templatesData = await getTemplates();
      setTemplates(templatesData || []);
    } catch (err) {
      console.error("Error al obtener templates:", err);
    }
  };

  // ðŸ”¹ Crear una nueva campaÃ±a
  const handleCreateCampaign = async (data) => {
    try {
      await createCampaign(data);
      fetchCampaigns();
      setOpenModal(false);
    } catch (err) {
      console.error("Error al crear campaÃ±a:", err);
    }
  };

  // ðŸ”¹ Cargar clientes desde un archivo Excel
  const handleUploadClients = async (campaignId, file) => {
    try {
      await uploadClients(campaignId, file);
      setOpenModal(false);
      fetchCampaigns();
    } catch (err) {
      console.error("Error al subir clientes:", err);
    }
  };

  // ðŸ”¹ Enviar la campaÃ±a a clientes
  const handleSendCampaign = async (campaignId) => {
    try {
      await sendCampaign(campaignId);
      fetchCampaigns();
    } catch (err) {
      console.error("Error al enviar campaÃ±a:", err);
    }
  };

  // ðŸ”¹ Eliminar campaÃ±a
  const handleDeleteCampaign = async (campaignId) => {
    try {
      await deleteCampaign(campaignId);
      fetchCampaigns();
    } catch (err) {
      console.error("Error al eliminar campaÃ±a:", err);
    }
  };

  // ðŸ”¹ Crear campaÃ±a (Abre modal sin seleccionar campaÃ±a)
  const handleCreate = () => {
    setSelectedCampaign(null);
    setOpenModal(true);
  };

  // ðŸ”¹ Editar campaÃ±a (Abre modal con datos de campaÃ±a seleccionada)
  const handleEdit = (campaign) => {
    console.log("campÃ±aaa",campaign);
    setSelectedCampaign(campaign);
    setOpenModal(true);
  };

  // ðŸ”¹ Cerrar el modal
  const handleClose = () => {
    setOpenModal(false);
    setSelectedCampaign(null);
  };

  return {
    campaigns,
    templates,
    pagination,
    setPagination,
    sortModel,
    setSortModel,
    openModal,
    selectedCampaign,
    handleCreate,  // âœ… Ahora estÃ¡ correctamente definido
    handleEdit,
    handleClose,
    fetchCampaigns,
    fetchTemplates,
    handleCreateCampaign,
    handleUploadClients,
    handleSendCampaign,
    handleDeleteCampaign, // âœ… Agregado manejo de eliminaciÃ³n
    loading,
    error,
  };
};

export default useCampaigns;
